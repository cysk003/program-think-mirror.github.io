<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:gd="http://schemas.google.com/g/2005"><id>tag:blogger.com,1999:blog-5235590154125226279.post7356159185142195160..comments</id><updated>2017-05-22T03:33:56.305+08:00</updated><title type='text'>Comments on 编程随想的博客: Java 性能优化[1]：基本类型 vs 引用类型</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://program-think.blogspot.com/feeds/comments/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default?max-results=999'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html'/><link rel="hub" href="http://pubsubhubbub.appspot.com/"/><author><name>编程随想</name><uri>http://www.blogger.com/profile/11741356469378252621</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='26' height='32' src='//4.bp.blogspot.com/-GTIh2pdzDYI/VtcrB6rX0pI/AAAAAAAABUg/vWdDxEU4N6c/s220/Thinker.jpg'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>12</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>999</openSearch:itemsPerPage>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-1124697428301272021</id><published>2021-05-09T08:21:08.127+08:00</published><updated>2021-05-09T08:21:08.127+08:00</updated><title type='text'>看了博主的这篇文章， 感觉C#跟java采用的是一模一样的策略呀， 基本类型都是值类型（struct...</title><content type='html'>看了博主的这篇文章， 感觉C#跟java采用的是一模一样的策略呀， 基本类型都是值类型（struct,enum列外，它们也是值类型）， 其它类型都是引用类型。&lt;br /&gt;值类型可以通过boxing变成引用， 可以通过unboxing转换回来。它们都搞个虚拟机， 现在.net也跨平台了， 感觉他们越来越相似了。&lt;br /&gt;还是比较喜欢c++的方式， 用&amp;amp;表示引用， 否则就是值， 完全由程序员控制。&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/1124697428301272021'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/1124697428301272021'/><link rel='alternate' type='text/html' href='https://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1620519668127#c1124697428301272021' title=''/><author><name>bcsx</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='https://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-357517073"/><gd:extendedProperty name="blogger.displayTime" value="2021年5月9日 上午8:21:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-6030038856065810963</id><published>2014-12-08T15:13:38.889+08:00</published><updated>2014-12-08T15:13:38.889+08:00</updated><title type='text'>&#xa;使用new创建对象的开销是不小的。在程序中能避免就应该尽量避免。&#xa;博主你好，对这句话我有点疑问：&#xa;...</title><content type='html'>&lt;br /&gt;使用new创建对象的开销是不小的。在程序中能避免就应该尽量避免。&lt;br /&gt;博主你好，对这句话我有点疑问：&lt;br /&gt;如果用其他的方式创建对象开销会相对小么？&lt;br /&gt;大多数时候我们还是无法避免用new创建对象吧？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/6030038856065810963'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/6030038856065810963'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1418022818889#c6030038856065810963' title=''/><author><name>高克</name><uri>http://www.blogger.com/profile/14481933531812348876</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-awpolTcUtuM/AAAAAAAAAAI/AAAAAAAAACM/9_zpz7pCKAc/s512-c/photo.jpg'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-2140635646"/><gd:extendedProperty name="blogger.displayTime" value="2014年12月8日 下午3:13:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-3665402498561394214</id><published>2013-10-23T16:52:05.324+08:00</published><updated>2013-10-23T16:52:05.324+08:00</updated><title type='text'>关于“线程和进程的差异”，&#xa;这算是比较基础的知识点，Google 一下应该不难找到相关的介绍性文章，...</title><content type='html'>关于“线程和进程的差异”，&lt;br /&gt;这算是比较基础的知识点，Google 一下应该不难找到相关的介绍性文章，或者也可以去看看维基百科的相关词条</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3665402498561394214'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3665402498561394214'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1382518325324#c3665402498561394214' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8865999480003577664'/><author><name>编程随想</name><uri>http://www.blogger.com/profile/11741356469378252621</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='26' height='32' src='http://1.bp.blogspot.com/-AmZd_cbsMA8/Th5EbQ2_22I/AAAAAAAAAfg/loksvIqGzic/s220/Thinker.jpg'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-1582521586"/><gd:extendedProperty name="blogger.displayTime" value="2013年10月23日 下午4:52:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-1600387244228538449</id><published>2013-10-23T16:50:35.172+08:00</published><updated>2013-10-23T16:50:35.172+08:00</updated><title type='text'>博文中的这句：&#xa;“堆相对进程来说是全局的，能够被所有线程访问”&#xa;&#xa;如果补上一个定语，变为如下，可能你...</title><content type='html'>博文中的这句：&lt;br /&gt;“堆相对进程来说是全局的，能够被所有线程访问”&lt;br /&gt;&lt;br /&gt;如果补上一个定语，变为如下，可能你就不会觉得疑惑了。&lt;br /&gt;“堆相对进程来说是全局的，能够被[b]该进程的[/b]所有线程访问”</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/1600387244228538449'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/1600387244228538449'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1382518235172#c1600387244228538449' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8865999480003577664'/><author><name>编程随想</name><uri>http://www.blogger.com/profile/11741356469378252621</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='26' height='32' src='http://1.bp.blogspot.com/-AmZd_cbsMA8/Th5EbQ2_22I/AAAAAAAAAfg/loksvIqGzic/s220/Thinker.jpg'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-1582521586"/><gd:extendedProperty name="blogger.displayTime" value="2013年10月23日 下午4:50:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-8865999480003577664</id><published>2013-10-03T09:21:36.977+08:00</published><updated>2013-10-03T09:21:36.977+08:00</updated><title type='text'>&amp;quot;堆相对进程来说是全局的，能够被所有线程访问&amp;quot;----为啥这里前面是进程后面是线...</title><content type='html'>&amp;quot;堆相对进程来说是全局的，能够被所有线程访问&amp;quot;----为啥这里前面是进程后面是线程？？ 一直关注楼主的博客，自己最近正在学习OS，对线程和进程还是不太能理解，楼主能专门写篇博客介绍一下吗？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8865999480003577664'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8865999480003577664'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1380763296977#c8865999480003577664' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-2119918881"/><gd:extendedProperty name="blogger.displayTime" value="2013年10月3日 上午9:21:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-3787251465545380630</id><published>2009-05-27T09:38:50.639+08:00</published><updated>2009-05-27T09:38:50.639+08:00</updated><title type='text'>楼上的同学：&#xa;当初Java它爹可能是为了让语言更傻瓜化才这么干。俺个人觉得，傻瓜化和灵活性有时候是矛...</title><content type='html'>楼上的同学：&lt;br /&gt;当初Java它爹可能是为了让语言更傻瓜化才这么干。俺个人觉得，傻瓜化和灵活性有时候是矛盾的，不太容易平衡。&lt;br /&gt;从内存存储的灵活性上看，可以说Java相对C++是倒退的。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3787251465545380630'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3787251465545380630'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1243388330639#c3787251465545380630' title=''/><author><name>编程随想</name><uri>http://www.blogger.com/profile/11741356469378252621</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='26' height='32' src='http://4.bp.blogspot.com/_itipB8vBZzQ/SY1isusKAfI/AAAAAAAAAGo/4YF360m0Yto/S220/Thinker_BlogSpot.jpg'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-1582521586"/><gd:extendedProperty name="blogger.displayTime" value="2009年5月27日 上午9:38:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-6195842503263705758</id><published>2009-05-26T19:03:53.853+08:00</published><updated>2009-05-26T19:03:53.853+08:00</updated><title type='text'>JAVA 硬性规定了对象实例必须存放在堆上，结果无论哪个短命且小巧的对象创建都要绕一个大弯去堆里面存...</title><content type='html'>JAVA 硬性规定了对象实例必须存放在堆上，结果无论哪个短命且小巧的对象创建都要绕一个大弯去堆里面存取，影响了性能。而C++这方面比较灵活，可以选择是在栈上面还是在堆上面创建对象，那么JAVA在这一点上相对C++是否一种倒退呢？</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/6195842503263705758'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/6195842503263705758'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1243335833853#c6195842503263705758' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-434430577"/><gd:extendedProperty name="blogger.displayTime" value="2009年5月26日 下午7:03:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-3442721368331000161</id><published>2009-05-12T09:55:00.000+08:00</published><updated>2009-05-12T09:55:00.000+08:00</updated><title type='text'>堆栈理解感觉应该看下数据结构的书更合适·&#xa;呵呵·&#xa;&#xa;好帖·&#xa;受教了·</title><content type='html'>堆栈理解感觉应该看下数据结构的书更合适·&lt;br /&gt;呵呵·&lt;br /&gt;&lt;br /&gt;好帖·&lt;br /&gt;受教了·</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3442721368331000161'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3442721368331000161'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1242093300000#c3442721368331000161' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-357517073"/><gd:extendedProperty name="blogger.displayTime" value="2009年5月12日 上午9:55:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-8221652609036878489</id><published>2009-03-19T20:37:00.000+08:00</published><updated>2009-03-19T20:37:00.000+08:00</updated><title type='text'>楼上同学提醒得好，关于“引用类型变量和它所引用的对象”是很容易被搞混淆的两个概念。我后面打算针对这个...</title><content type='html'>楼上同学提醒得好，关于“引用类型变量和它所引用的对象”是很容易被搞混淆的两个概念。我后面打算针对这个问题，写个帖子说一下。&lt;BR/&gt;至于本文说的“引用类型”，主要针对的是“被引用的对象”。&lt;BR/&gt;&lt;BR/&gt;至于你说的实例变量，实际上就是类对象的某个成员，是类对象的一部分，而本文强调类对象是存放在堆上的。所以并不矛盾。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8221652609036878489'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8221652609036878489'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1237466220000#c8221652609036878489' title=''/><author><name>编程随想</name><uri>http://www.blogger.com/profile/11741356469378252621</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='26' height='32' src='http://4.bp.blogspot.com/_itipB8vBZzQ/SY1isusKAfI/AAAAAAAAAGo/4YF360m0Yto/S220/Thinker_BlogSpot.jpg'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-1582521586"/><gd:extendedProperty name="blogger.displayTime" value="2009年3月19日 下午8:37:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-3571365432444503782</id><published>2009-03-19T18:56:00.000+08:00</published><updated>2009-03-19T18:56:00.000+08:00</updated><title type='text'>感觉表达不是很精确。所谓的引用类型和基本类型指的是“变量”，不能笼统的说是存在堆里或者栈里。首先，j...</title><content type='html'>感觉表达不是很精确。&lt;BR/&gt;所谓的引用类型和基本类型指的是“变量”，不能笼统的说是存在堆里或者栈里。首先，java规范中列出的七种变量类型中，比如实例变量（不管是基本类型还是引用类型）一般会是放在堆里的（不排除为了jvm为了优化而允许的在栈中分配对象的情形）。其次，对与引用类型的变量来说，最好不要把引用类型变量和它所引用的对象直接混到一起说。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3571365432444503782'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/3571365432444503782'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1237460160000#c3571365432444503782' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-357517073"/><gd:extendedProperty name="blogger.displayTime" value="2009年3月19日 下午6:56:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-8680115815746762987</id><published>2009-03-19T18:11:00.000+08:00</published><updated>2009-03-19T18:11:00.000+08:00</updated><title type='text'>楼上的同学，我说的“Java的纯面向对象招牌打了折扣。”其实是针对Sun之前的宣传。因为Sun以前老...</title><content type='html'>楼上的同学，&lt;BR/&gt;我说的“Java的纯面向对象招牌打了折扣。”其实是针对Sun之前的宣传。因为Sun以前老鼓吹“纯面向对象”，但是严格意义上讲，Java在OO方面还不够“纯”。是不是有点咬文嚼字？ :-)&lt;BR/&gt;其实，关于Java的基本类型的设计是否合理，在Java社区内一直有争论。似乎有些大牛也卷入了口水战中。</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8680115815746762987'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/8680115815746762987'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1237457460000#c8680115815746762987' title=''/><author><name>编程随想</name><uri>http://www.blogger.com/profile/11741356469378252621</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='26' height='32' src='http://4.bp.blogspot.com/_itipB8vBZzQ/SY1isusKAfI/AAAAAAAAAGo/4YF360m0Yto/S220/Thinker_BlogSpot.jpg'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-1582521586"/><gd:extendedProperty name="blogger.displayTime" value="2009年3月19日 下午6:11:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-2962748206340226851</id><published>2009-03-19T17:10:00.000+08:00</published><updated>2009-03-19T17:10:00.000+08:00</updated><title type='text'>你说的弊端不算什么，如果说Java 不是纯面向对象就让Java蒙羞，那么说作者您不是贼，是不是也蒙羞...</title><content type='html'>你说的弊端不算什么，如果说Java 不是纯面向对象就让Java蒙羞，那么说作者您不是贼，是不是也蒙羞呢。呵呵 基本类型不参与GC 这本来就给开发人员提供了一种选择，如果没有基本类型，全是面向对象的类型，那要是i++ 这样的操作就弄得程序性能傻X了。python就没基本类型，那for i in range(100000):估计就懵了</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/2962748206340226851'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/2962748206340226851'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1237453800000#c2962748206340226851' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-357517073"/><gd:extendedProperty name="blogger.displayTime" value="2009年3月19日 下午5:10:00"/></entry>
<entry><id>tag:blogger.com,1999:blog-5235590154125226279.post-6112784203498739157</id><published>2009-03-17T10:14:00.000+08:00</published><updated>2009-03-17T10:14:00.000+08:00</updated><title type='text'>＆＾％＄＃被GC宠坏了 很少细心考虑内存开销  囧 受教</title><content type='html'>＆＾％＄＃&lt;BR/&gt;被GC宠坏了 很少细心考虑内存开销  囧 受教</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/6112784203498739157'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/5235590154125226279/7356159185142195160/comments/default/6112784203498739157'/><link rel='alternate' type='text/html' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html?showComment=1237256040000#c6112784203498739157' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to xmlns:thr='http://purl.org/syndication/thread/1.0' href='http://program-think.blogspot.com/2009/03/java-performance-tuning-1-two-types.html' ref='tag:blogger.com,1999:blog-5235590154125226279.post-7356159185142195160' source='http://www.blogger.com/feeds/5235590154125226279/posts/default/7356159185142195160' type='text/html'/><gd:extendedProperty name="blogger.itemClass" value="pid-357517073"/><gd:extendedProperty name="blogger.displayTime" value="2009年3月17日 上午10:14:00"/></entry></feed>
